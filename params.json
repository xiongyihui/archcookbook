{"name":"Arch Cookbook","tagline":"anyone can cook","body":"# Preface #\r\n\r\n\"Anyone can cook.\" - Gusteau's (a character in Ratatouille)\r\n\r\nThis cookbook is a starting point to work with Seeedstudio Arch platform. \r\nIt introduces the platform with step by step examples by using Seeedstudio \r\nGrove modules. The cookbook is written with beginners in mind and assumes \r\nno prior experience in mbed API. This book expects a basic knowledge of C \r\nprogramming language. mbed API and programs are written C++ language. \r\nAlthough not essential to understand the programs, it is better you \r\nunderstand how to create an object for a class and how to use member functions.\r\n\r\nIf you are beginner, who is learning Embedded Systems and programming in \r\nC/C++ - import andexecute the examples programs one by one by following the \r\nprocedure listed in each recipe. You can skip all other fine details presented \r\nin the beginning.\r\n\r\nHappy Programming :)\r\n\r\n\r\n\r\n# Arch platform #\r\n\r\nSeeedstudio Arch is a mbed enabled platform based on NXP's LPC11U24 microcontroller. \r\nThis platforms comes with header pins whose footprint are compatible with Arduino shields.\r\n The two on-board Grove connectors can be interfaced with numerous Grove based sensors, actuators and display modules.\r\n\r\nArch platform can be easily programmed over USB using the LPC11U24's inbuilt ISP driver. \r\nUnlike mbed LPC11U24, Arch platform does not come with mbed interface chip. Hence, \r\nan additional Arch board has to be used to debug the target using CMSIS-DAP.\r\n\r\n\r\n## Features ##\r\n\r\n* Shields compatible header pins\r\n* Two Grove connectors\r\n* A large number of grove modules\r\n* Drag-n-drop programming\r\n* NXP LPC11U24 MCU\r\n* Low power ARM Cortex-M0 Core\r\n* 48MHz, 32KB Flash, 8KB RAM, 4KB EEPROM\r\n* USB Device, 2xSPI, UART, I2C\r\n\r\n## Hardware ##\r\n\r\n![Arch V1.1 Pinout](figures/arch_v1.1_pinout.png)\r\n\r\n### Digital In/Out ###\r\nAll pins with light blue coloured lable can be used as DigitalOut/DigitalIn/DigitalInOut interface.\r\n\r\n\r\n### PwmOut ###\r\nPins labelled as PwmOut (i.e magenta colourd lable) are possible outputs that can be routed from timers to generate PWM.\r\n\r\n### UART ###\r\nThe TXD or RXD labelled pins (i.e yellow coloured label) are possible routing pins for one UART port.\r\nAt a time, one TXD and one RXD pin can be configured for the UART.\r\n\r\n# Recipe 1: Blinking an LED #\r\nA tradition of learn programming is write our first program to print a \"hello, world\" on our display.\r\nIn Embedded Systems, we use a blinking LED to show our first running embedded system program to the world. \r\n\r\n## Ingredients ##\r\n* Seeedstudio Arch board\r\n* Micro-USB cable\r\n* Access to internet and online mbed compiler.\r\n\r\n## Procedure ##\r\n* Import the following Arch_GPIO_Ex1 program into online mbed compiler.\r\n* Select Seeedstudio Arch as target platform (navigate to top-left corner of online compiler).\r\n* Click Compile and Download button.\r\n* You browser will download Arch_GPIO_Ex1_LPC11U24.bin file.\r\n* Connect Arch board to PC using a micro-USB cable.\r\n* Press the reset button longer(at-least 2 seconds) and release.\r\n* You must see a USB drive being detected by you OS.\r\n* Copy the Arch_GPIO_Ex1_LPC11U24.bin to that USB drive.\r\n* Press and release the reset button very quickly.\r\n* You have flashed your first program onto Arch board.\r\n\r\n**Arch_GPIO_Ex1** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/viswesr/code/Arch_GPIO_Ex1)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n\r\n/* Configure a GPIO pin as output for controlling a LED. 'led' is user assigned name and\r\n 'LED1' is a internal name given to a port pin P1_8 in this Arch platform. */\r\nDigitalOut led(LED1);\r\n\r\nint main()\r\n{\r\n    while(1) {\r\n        led = 1;    // Switch ON the LED.\r\n        wait(0.5);  // Wait for 0.5 Seconds.\r\n        led = 0;    // Switch OFF the LED.\r\n        wait(0.5);  // Wait for 0.5 Seconds.\r\n    }\r\n}\r\n\r\n~~~~\r\n\r\nThe above program uses mbed interface DigitalOut and mbed built-in function wait().\r\nLED1 is an pseudonym given to port pin P1_8. LED1 is labelled D1 in the Arch board.\r\nThe state of LED1 is changed writing either 0 or 1 to 'led'. The mbed wait() function\r\nproduces a delay in seconds. The state of the 'led' is continuous toggled every 0.5 seconds\r\ninside the endless *while()* loop.\r\n\r\nThe features and functions present in DigitalOut are documented in DigitalOut page in handbook.\r\nSimilarly the wait() function is documented in wait page in handbook\r\n\r\n## Variation ##\r\nLet us rewrite the above program using alternate APIs provided DigitalOut and wait.\r\n\r\n**Arch_GPIO_Ex2** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/viswesr/code/Arch_GPIO_Ex2)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n\r\n/* Configure a GPIO pin as output for controlling a LED. 'led' is an user assigned name and\r\n 'LED1' is an internal name given to a port pin P1_8 in this Arch platform. */\r\nDigitalOut led(LED1);\r\n\r\nint main()\r\n{\r\n    while(1) {\r\n        led.write(1);    // Here, DigitalOut -> write() function is used to set the ouput high.\r\n        wait_ms(500);    // Wait for 0.5 Seconds. The time is specified in milli-seconds using wait_ms() function.\r\n        led.write(0);    // Switch OFF the LED.\r\n        wait_us(500000); // Wait for 0.5 Seconds. The time is specified in micro-seconds using wait_us() function.\r\n    }\r\n}\r\n\r\n~~~~\r\n\r\nInstead of led = in the Ex1 program, we have used led.write() function which essential does the same operation. \r\nHere, wait() is replaced by wait_us(). The delay time is specified in micro seconds instead of seconds in this function.\r\n\r\n# Control multi LEDs #\r\n\r\n## Ingredients ##\r\n* Same as Recipe 1.\r\n\r\n## Procedure\r\n\r\n* Build and upload the program to Arch platform. (follow procedure listed in Recipe 1)\r\n\r\n**Arch_GPIO_Ex4** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/viswesr/code/Arch_GPIO_Ex4)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n\r\nBusOut onboardLEDs(P1_8,P1_9,P1_10,P1_11); /*P1_8 - P1_11 are LED1 - LED4*/\r\n\r\nint main()\r\n{\r\n    int i;\r\n    while(1) {\r\n        for(i=0; i<16; i++) {\r\n            onboardLEDs.write(i); /* LED1 is LSB  and LED4 is MSB*/\r\n            wait(0.5);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n~~~~\r\n\r\nThe following program uses one variable to modify a set of 4 LEDs with BusOut interface. \r\nThe LED1 to LED4 counts up 4-bit binary value one by one with half-a-second delay. \r\nBusOut interface comes handy while sending data to devices with parallel ports like LCDs.\r\n\r\n# Playing with Digital Output #\r\n\r\n## Ingredients ##\r\n\r\nIn addition to things listed in Recipe 1 we require\r\n\r\n* Grove - Button\r\n\r\n![Digital Input](figures/digital_input.jpg)\r\n\r\n## Procedure\r\n\r\n* connect Grove - Button to on-board grove connector marked UART.\r\n* Import the following Arch_GPIO_Ex3 program into online mbed compiler.\r\n* Build and upload the program to Arch platform. (follow procedure listed in Recipe 1)\r\n\r\nThis program keeps the LED1 on as long as the button is pressed.\r\n\r\n**Arch_GPIO_Ex3** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/viswesr/code/Arch_GPIO_Ex3)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n\r\nDigitalOut led(LED1);    // Configure LED1 pin as output\r\nDigitalIn button(P1_14); // Configure P1_14 pin as input\r\n\r\nint main()\r\n{\r\n    while(1) {\r\n        led.write(button.read());    /* read the state of input port pin P1_14 and write it to output port pin LED1*/\r\n    }\r\n}\r\n\r\n~~~~\r\n\r\nWe use DigitalIn interface to read the status of a tactile switch connected to port pin P1_14.\r\nThe button.read() function returns a value 1 if button is pressed and 0 if released. \r\nThis value is written to LED1 port pin using led.write().\r\n\r\nMore information on this new module is available at DigitalIn handbook page.\r\n\r\n# Analog world #\r\n## Ingredients ##\r\nIn addition to things listed in Recipe 1 we require\r\n\r\n* Grove - Potentiometer\r\n\r\n![Analog world](figures/analog_world.jpg)\r\n\r\n## Procedure ##\r\n\r\n* Connect middle SIG pin of Grove - Potentiometer to P0_11, other two pins to GND and 3.3V\r\n* Build and upload the program to Arch platform. (follow procedure listed in Recipe 1)\r\n\r\nThe rate of blinking of the LED is controlled by the analog value read from the potentiometer.\r\n\r\n**Arch_Analog_POT** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/viswesr/code/Arch_Analog_POT)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n\r\nAnalogIn pot(P0_11);   /* Potentiometer middle pin connected to P0_11, other two ends connected to GND and 3.3V */\r\nDigitalOut led(LED1);  /* LED blinks with a delay based on the analog input read */\r\n\r\nint main()\r\n{\r\n    float ain;   /* Variable to store the analog input*/\r\n\r\n    while(1) {\r\n        ain = pot.read(); /* Read analog value (output will be any value between 0 and 1 */\r\n        led = 1;          /* Switch ON LED        */\r\n        wait(ain);        /* Wait for 'ain' Seconds (maximum delay is 1 seconds)*/\r\n        led = 0;          /* Switch Off LED       */\r\n        wait(ain);        /* Wait for 'ain' Seconds (maximum delay is 1 seconds)*/\r\n    }\r\n}\r\n\r\n~~~~\r\n\r\n\r\n\r\n# Temperature Sensing #\r\n## Ingredients ##\r\nIn addition to things listed in Recipe 1 we require\r\n\r\n* Grove - Temperature Sensor\r\n\r\n![Temperature Sensing](figures/temperature.jpg)\r\n\r\n## Procedure ##\r\n\r\n* Connect SIG pin of Grove - Temperature Sensor to P0_11, other two pins to GND and 3.3V\r\n* Build and upload the program to Arch platform. (follow procedure listed in Recipe 1)\r\n\r\nThe room temperature is displayed as LED blinks. LED4 blinks corresponding to tens place of temperature value(in deg C) and LED1 blinks according to units place.\r\n\r\n**Arch_Analog_Thermistor_Blinker** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/viswesr/code/Arch_Analog_Thermistor_Blinker)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n\r\nAnalogIn thermistor(P0_11);   /* Thermistor output connected to P0_11 */\r\n\r\nDigitalOut tensplaceLED(LED4);  /* This led blinks as per tens place of temperature value(in deg C) */\r\nDigitalOut unitsplaceLED(LED1); /* This led blinks as per units place of temperature value(in deg C) */\r\n\r\nint main()\r\n{\r\n    unsigned int a, beta = 3975, units, tens;\r\n    float temperature, resistance;\r\n\r\n    while(1) {\r\n        a = thermistor.read_u16(); /* Read analog value */\r\n        \r\n        /* Calculate the resistance of the thermistor from analog votage read. */\r\n        resistance= (float) 10000.0 * ((65536.0 / a) - 1.0);\r\n        \r\n        /* Convert the resistance to temperature using Steinhart's Hart equation */\r\n        temperature=(1/((log(resistance/5000.0)/beta) + (1.0/298.15)))-273.15; \r\n        \r\n        units = (int) temperature % 10;\r\n        tens  = (int) temperature / 10;\r\n        \r\n        \r\n        for(int i=0; i< tens; i++)\r\n        {\r\n             tensplaceLED = 1;\r\n             wait(.200);\r\n             tensplaceLED = 0;\r\n             wait(.200);\r\n        }\r\n        \r\n        for(int i=0; i< units; i++)\r\n        {\r\n             unitsplaceLED = 1;\r\n             wait(.200);\r\n             unitsplaceLED = 0;\r\n             wait(.200);\r\n        }\r\n      \r\n        wait(0.5);\r\n    }\r\n}\r\n\r\n\r\n~~~~\r\n\r\n\r\n\r\n# Display more information #\r\n## Ingredients ##\r\nIn addition to things listed in Recipe 1 we require\r\n\r\n* Grove - 4 Digit Display\r\n\r\n![Display](figures/display.jpg)\r\n\r\n## Procedure ##\r\n\r\n* Connect Grove - Digit Display to UART Grove connector\r\n* Build and upload the program to Arch platform. (follow procedure listed in Recipe 1)\r\n\r\n**Arch_Analog_Thermistor_Blinker** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/yihui/code/Arch_Analog_Thermistor_Blinker)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n\r\nAnalogIn thermistor(P0_11);   /* Thermistor output connected to P0_11 */\r\n\r\nDigitalOut tensplaceLED(LED4);  /* This led blinks as per tens place of temperature value(in deg C) */\r\nDigitalOut unitsplaceLED(LED1); /* This led blinks as per units place of temperature value(in deg C) */\r\n\r\nint main()\r\n{\r\n    unsigned int a, beta = 3975, units, tens;\r\n    float temperature, resistance;\r\n\r\n    while(1) {\r\n        a = thermistor.read_u16(); /* Read analog value */\r\n        \r\n        /* Calculate the resistance of the thermistor from analog votage read. */\r\n        resistance= (float) 10000.0 * ((65536.0 / a) - 1.0);\r\n        \r\n        /* Convert the resistance to temperature using Steinhart's Hart equation */\r\n        temperature=(1/((log(resistance/5000.0)/beta) + (1.0/298.15)))-273.15; \r\n        \r\n        units = (int) temperature % 10;\r\n        tens  = (int) temperature / 10;\r\n        \r\n        \r\n        for(int i=0; i< tens; i++)\r\n        {\r\n             tensplaceLED = 1;\r\n             wait(.200);\r\n             tensplaceLED = 0;\r\n             wait(.200);\r\n        }\r\n        \r\n        for(int i=0; i< units; i++)\r\n        {\r\n             unitsplaceLED = 1;\r\n             wait(.200);\r\n             unitsplaceLED = 0;\r\n             wait(.200);\r\n        }\r\n      \r\n        wait(0.5);\r\n    }\r\n}\r\n\r\n\r\n~~~~\r\n\r\n\r\n\r\n# Recipe 7: Working with RTC #\r\n## Ingredients ##\r\nIn addition to things listed in [Recipe 1][Arch Cookbook], we require\r\n\r\n* Grove - Serial LCD\r\n* Grove - RTC\r\n\r\n## Procedure ##\r\n* Connect Grove - Serial LCD to on-board grove connector marked UART.\r\n* Connect Grove - RTC to on board grove connector markded I2C.\r\n* Build and upload the program to Arch platform. follow procedure listed in **Recipe 1**.\r\n\r\nThe following program demonstrates a clock.\r\n\r\n**Arch_GroveRTC_Ex1** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/yihui/code/Arch_GroveRTC_Ex1)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n#include \"SerialLCD.h\"\r\n#include \"ds1307.h\"\r\n \r\nSerialLCD lcd(P1_13, P1_14);  // Grove Serial LCD is connected to UART Tx and Rx pins\r\nDS1307 rtc(P0_5, P0_4);    // Grove RTC is connected to I2C SDA(P0_5) and SCL(P0_4)\r\n \r\nint main() {\r\n    const char *week[] = {\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"};\r\n    int sec, min, hour, day, date, month, year;\r\n    char strBuffer[16];\r\n    \r\n    lcd.begin();\r\n    lcd.print(\"Clock\");\r\n    rtc.start_clock();\r\n    rtc.gettime(&sec, &min, &hour, &day, &date, &month, &year);\r\n    if (0 == year) {\r\n        rtc.settime(0, 0, 0, 4, 1, 1, 2014 % 100); // Jan 1st, 2014, Wed, 00:00:00\r\n    }\r\n\r\n    while(1) {\r\n        rtc.gettime(&sec, &min, &hour, &day, &date, &month, &year);\r\n        snprintf(strBuffer, sizeof(strBuffer), \"%d-%d-%d  %s\", 2000 + year, month, date, week[day]);\r\n        lcd.setCursor(0, 0);\r\n        lcd.print(strBuffer);\r\n        snprintf(strBuffer, sizeof(strBuffer), \"%d:%d:%d\", hour, min, sec);\r\n        lcd.setCursor(0, 1);\r\n        lcd.print(strBuffer);\r\n        wait(0.5);\r\n    }\r\n}\r\n\r\n\r\n\r\n~~~~\r\n\r\n# Recipe 8: Working with USB Keyboard #\r\n## Ingredients ##\r\nIn addition to things listed in [Recipe 1][Arch Cookbook], we require\r\n\r\n* Grove - Button\r\n\r\n## Procedure ##\r\n* Connect Grove - Button to on-board grove connector marked UART.\r\n* Build and upload the program to Arch platform. follow procedure listed in **Recipe 1**.\r\n\r\nThe following program demonstrates a USB keyboard with one button. Press the button to mute your computer and press CapsLock, NumLock or ScrollLock of your keyboard to turn on/off Arch's LEDs.\r\n\r\n**Arch_USB_Keyboard_Ex1** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/yihui/code/Arch_USB_Keyboard_Ex1)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n#include \"USBKeyboard.h\"\r\n\r\n//LED1: NUM_LOCK, LED2: CAPS_LOCK, LED3: SCROLL_LOCK\r\nBusOut leds(LED1, LED2, LED3);\r\nDigitalOut button(P1_14);               // Configure P1_14 pin as input\r\nUSBKeyboard keyboard;\r\n\r\nint main() {\r\n    int buttonPressedCount = 0; \r\n    \r\n    while (!keyboard.configured()) {    // wait until keyboard is configured\r\n    }\r\n    \r\n    while (1) {\r\n        leds = keyboard.lockStatus();\r\n        \r\n        if (button.read()) {\r\n            buttonPressedCount++;\r\n            if (2 == buttonPressedCount) { // when button is pressed about 0.02s\r\n                keyboard.mediaControl(KEY_MUTE); // send mute key\r\n            }\r\n        } else {\r\n            buttonPressedCount = 0;\r\n        }\r\n        wait(0.01);\r\n    }\r\n}\r\n\r\n~~~~\r\n\r\nThe following program implements an automatic input keyboard triggered by CapsLock key (for Windows). When the CapsLock key is pressed, a website is opened by IE.\r\n\r\n**Arch_USB_Keyboard_Ex2** - [Import to mbed online compiler](https://mbed.org/compiler/#import:https://mbed.org/users/yihui/code/Arch_USB_Keyboard_Ex2)\r\n\r\n~~~~{.cpp}\r\n#include \"mbed.h\"\r\n#include \"USBKeyboard.h\"\r\n \r\n//LED1: NUM_LOCK, LED2: CAPS_LOCK, LED3: SCROLL_LOCK\r\nBusOut leds(LED1, LED2, LED3);\r\nUSBKeyboard keyboard;\r\n \r\nint main(void) {\r\n    uint8_t caps;                       // status of CapsLock\r\n    \r\n    while (!keyboard.configured()) {    // wait until keyboard is configured\r\n    }\r\n \r\n    while (1) {\r\n        leds = keyboard.lockStatus();\r\n        caps = keyboard.lockStatus() & 0x2;\r\n        \r\n        // wait until CapsLock is pressed\r\n        while ((keyboard.lockStatus() & 0x2) == caps) {\r\n            leds = keyboard.lockStatus();\r\n        }\r\n        \r\n        if (!caps) {\r\n            keyboard.keyCode(KEY_CAPS_LOCK);    // lowercase input\r\n        }\r\n        \r\n        // Automatic input\r\n        keyboard.keyCode('r', 0x08);            // win + r\r\n        wait(0.1);\r\n        keyboard.puts(\"iexplore  http://seeedstudio.com\\n\\n\");\r\n    }\r\n}\r\n~~~~\r\n\r\n[Arch Cookbook]: http://mbed.org/users/viswesr/notebook/arch-cookbook/\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}